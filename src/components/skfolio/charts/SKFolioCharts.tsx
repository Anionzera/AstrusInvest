import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../ui/card';
import { Button } from '../../ui/button';
import { Badge } from '../../ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../../ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../ui/select';
import { Alert, AlertDescription } from '../../ui/alert';
import { 
  Loader2, 
  BarChart3, 
  PieChart, 
  TrendingUp,
  Activity,
  RefreshCw,
  Download,
  Eye,
  Zap,
  LineChart,
  Layers
} from 'lucide-react';
import { toast } from '../../ui/use-toast';
import PlotlyChart from '../PlotlyChart';

/**
 * üé® SKFOLIO CHARTS - SISTEMA COMPLETO DE VISUALIZA√á√ïES
 * 
 * Este m√≥dulo cont√©m todas as visualiza√ß√µes avan√ßadas do SKFolio:
 * 
 * üìä GR√ÅFICOS PRINCIPAIS (10 tipos):
 * 
 * 1. ü•ß ALLOCATION PIE
 *    - Gr√°fico de pizza com aloca√ß√£o dos ativos
 *    - Mostra distribui√ß√£o de pesos do portf√≥lio
 *    - Filtros para pesos significativos (>1%)
 * 
 * 2. üî• CORRELATION HEATMAP  
 *    - Matriz de correla√ß√£o entre ativos
 *    - Escala de cores RdBu (vermelho-azul)
 *    - Valores num√©ricos nas c√©lulas
 * 
 * 3. üìà RETURNS DISTRIBUTION
 *    - An√°lise completa com 4 subplots:
 *      * Histograma de retornos
 *      * Box plot dos retornos  
 *      * Retornos acumulados vs benchmark
 *      * Q-Q plot para normalidade
 * 
 * 4. üéØ EFFICIENT FRONTIER
 *    - Fronteira eficiente risco-retorno
 *    - Portf√≥lio otimizado destacado
 *    - Capital Market Line (CML)
 *    - Ativos individuais plotados
 * 
 * 5. üéØ RISK-RETURN SCATTER  
 *    - An√°lise individual por ativo
 *    - Tamanho = peso no portf√≥lio
 *    - Cor = contribui√ß√£o para o risco
 *    - Tooltips com informa√ß√µes detalhadas
 * 
 * 6. üìà CUMULATIVE RETURNS
 *    - Retornos cumulativos vs benchmark
 *    - Retornos mensais em barras
 *    - An√°lise temporal completa
 * 
 * 7. üìâ DRAWDOWN CHART
 *    - Evolu√ß√£o vs m√°ximo hist√≥rico
 *    - Per√≠odos de drawdown destacados
 *    - Estat√≠sticas de perda m√°xima
 * 
 * 8. üéØ PERFORMANCE ATTRIBUTION
 *    - Contribui√ß√£o de cada ativo para retorno
 *    - Contribui√ß√£o para risco
 *    - An√°lise de efici√™ncia (retorno/risco)
 *    - Decomposi√ß√£o Sharpe Ratio
 * 
 * 9. üìä ROLLING METRICS
 *    - M√©tricas m√≥veis por janela temporal:
 *      * Retorno m√≥vel anualizado
 *      * Volatilidade m√≥vel  
 *      * Sharpe Ratio m√≥vel
 *      * Beta m√≥vel (se h√° benchmark)
 * 
 * 10. üå°Ô∏è VOLATILITY SURFACE
 *     - Superf√≠cie 3D de volatilidade
 *     - M√∫ltiplas janelas temporais (5d a 252d)
 *     - Heatmap com evolu√ß√£o temporal
 * 
 * üöÄ TECNOLOGIAS:
 * - Plotly.js para gr√°ficos interativos
 * - Subplots para an√°lises complexas
 * - Responsive design
 * - Tooltips avan√ßados
 * - Exporta√ß√£o autom√°tica para HTML
 * 
 * üé® PALETA DE CORES:
 * - Set3 para diversidade
 * - Viridis para superf√≠cies
 * - RdBu para correla√ß√µes
 * - Verde/Vermelho para performance
 * 
 * üìê DIMENS√ïES OTIMIZADAS:
 * - 400-500px: Gr√°ficos simples
 * - 600-700px: An√°lises com subplots
 * - 800px: An√°lises complexas (drawdown)
 * 
 * üîß CONFIGURA√á√ïES:
 * - DisplayModeBar: true (para interatividade)
 * - Responsive: true (mobile-friendly)
 * - Config avan√ßado por tipo
 */

interface ChartInfo {
  id: string;
  name: string;
  description: string;
  type: string;
  height: number;
  features: string[];
}

export const SKFOLIO_CHARTS: ChartInfo[] = [
  {
    id: 'allocation_pie',
    name: 'Aloca√ß√£o do Portf√≥lio',
    description: 'Distribui√ß√£o de pesos por ativo em formato de pizza',
    type: 'pie',
    height: 400,
    features: ['Donut chart', 'Filtro >1%', 'Percentuais', 'Cores Set3']
  },
  {
    id: 'correlation_heatmap',
    name: 'Matriz de Correla√ß√£o',
    description: 'Correla√ß√£o entre todos os ativos do portf√≥lio',
    type: 'heatmap',
    height: 500,
    features: ['RdBu colorscale', 'Valores num√©ricos', 'Sim√©trica', 'Hover info']
  },
  {
    id: 'returns_distribution',
    name: 'An√°lise de Retornos',
    description: 'An√°lise completa da distribui√ß√£o de retornos',
    type: 'subplots',
    height: 700,
    features: ['4 subplots', 'Histograma', 'Box plot', 'Q-Q plot', 'Benchmark']
  },
  {
    id: 'efficient_frontier',
    name: 'Fronteira Eficiente',
    description: 'Fronteira de efici√™ncia e Capital Market Line',
    type: 'scatter',
    height: 500,
    features: ['Portf√≥lio otimizado', 'CML', 'Ativos individuais', 'Sharpe info']
  },
  {
    id: 'risk_return_scatter',
    name: 'Risco-Retorno por Ativo',
    description: 'An√°lise individual com peso proporcional',
    type: 'scatter',
    height: 500,
    features: ['Tamanho = peso', 'Colorscale', 'Tooltips detalhados', 'Contribui√ß√µes']
  },
  {
    id: 'cumulative_returns',
    name: 'Retornos Cumulativos',
    description: 'Evolu√ß√£o temporal vs benchmark',
    type: 'subplots',
    height: 700,
    features: ['2 subplots', 'Retornos acumulados', 'Barras mensais', 'Benchmark']
  },
  {
    id: 'drawdown_chart',
    name: 'An√°lise de Drawdown',
    description: 'Perdas m√°ximas e per√≠odos de recupera√ß√£o',
    type: 'subplots',
    height: 600,
    features: ['Valor vs m√°ximo', 'Drawdown %', 'Per√≠odos destacados', 'Estat√≠sticas']
  },
  {
    id: 'performance_attribution',
    name: 'Atribui√ß√£o de Performance',
    description: 'Contribui√ß√£o individual para retorno e risco',
    type: 'subplots',
    height: 700,
    features: ['4 subplots', 'Retorno contrib.', 'Risco contrib.', 'Efici√™ncia', 'Sharpe decomp.']
  },
  {
    id: 'rolling_metrics',
    name: 'M√©tricas M√≥veis',
    description: 'Evolu√ß√£o temporal das m√©tricas de risco-retorno',
    type: 'subplots',
    height: 600,
    features: ['4 subplots', 'Retorno m√≥vel', 'Vol. m√≥vel', 'Sharpe m√≥vel', 'Beta/VaR']
  },
  {
    id: 'volatility_surface',
    name: 'Superf√≠cie de Volatilidade',
    description: 'Volatilidade por diferentes janelas temporais',
    type: 'heatmap',
    height: 500,
    features: ['9 janelas', '5d-252d', 'Viridis colors', 'Temporal evolution']
  }
];

/**
 * üîç ESTAT√çSTICAS DO SISTEMA:
 */
export const CHART_STATS = {
  total_charts: SKFOLIO_CHARTS.length,
  types: ['pie', 'heatmap', 'scatter', 'subplots'],
  avg_height: Math.round(SKFOLIO_CHARTS.reduce((sum, chart) => sum + chart.height, 0) / SKFOLIO_CHARTS.length),
  total_features: SKFOLIO_CHARTS.reduce((sum, chart) => sum + chart.features.length, 0),
  complex_charts: SKFOLIO_CHARTS.filter(c => c.type === 'subplots').length
};

interface ChartData {
  allocation_pie?: string;
  efficient_frontier?: string;
  correlation_heatmap?: string;
  returns_distribution?: string;
  cumulative_returns?: string;
  risk_metrics?: string;
}

interface PortfolioData {
  success: boolean;
  charts: ChartData;
  portfolio_metrics: {
    expected_return: number;
    volatility: number;
    sharpe_ratio: number;
    max_drawdown: number;
  };
  assets_info: Array<{
    symbol: string;
    weight: number;
  }>;
}

const AIPortfolioCharts: React.FC = () => {
  const [portfolioData, setPortfolioData] = useState<PortfolioData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedSymbols, setSelectedSymbols] = useState<string[]>(['PETR4.SA', 'VALE3.SA', 'ITUB4.SA', 'AAPL', 'TSLA']);
  const [period, setPeriod] = useState<string>('2y');
  const [optimizationType, setOptimizationType] = useState<string>('mean_risk');

  const generateCharts = async () => {
    if (selectedSymbols.length < 2) {
      toast({
        title: "S√≠mbolos Insuficientes",
        description: "Selecione pelo menos 2 ativos para gerar visualiza√ß√µes",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);
    try {
      const response = await fetch('/api/skfolio/brazilian-stocks/optimize', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          symbols: selectedSymbols,
          period: period,
          optimization_type: optimizationType,
          include_charts: true,
          config: {
            risk_measure: 'VARIANCE',
            solver: 'CLARABEL',
            min_weights: 0.05,
            max_weights: 0.40
          }
        }),
      });

      const data = await response.json();
      
      if (data.success) {
        setPortfolioData(data);
        toast({
          title: "üé® Visualiza√ß√µes Geradas!",
          description: `Gr√°ficos criados para ${data.assets_info.length} ativos`,
        });
      } else {
        throw new Error(data.error || 'Erro ao gerar visualiza√ß√µes');
      }
    } catch (error) {
      console.error('Erro ao gerar gr√°ficos:', error);
      toast({
        title: "Erro nas Visualiza√ß√µes",
        description: error instanceof Error ? error.message : "Erro desconhecido",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const downloadChart = (chartType: string) => {
    toast({
      title: "Download Iniciado",
      description: `Baixando gr√°fico: ${chartType}`,
    });
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-4xl font-bold bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
            Analytics & Visualiza√ß√µes
          </h1>
          <p className="text-lg text-muted-foreground mt-2">
            Visualiza√ß√µes interativas avan√ßadas para an√°lise quantitativa de portf√≥lios
          </p>
        </div>
        <Badge variant="outline" className="text-lg px-4 py-2 bg-gradient-to-r from-indigo-50 to-purple-50 border-indigo-200">
          <LineChart className="h-4 w-4 mr-2" />
          Plotly Analytics
        </Badge>
      </div>

      {/* Controles */}
      <Card className="border-0 shadow-lg bg-gradient-to-br from-white to-indigo-50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-indigo-900">
            <Layers className="h-5 w-5" />
            Configura√ß√µes de Visualiza√ß√£o
          </CardTitle>
          <CardDescription className="text-indigo-700">
            Configure os par√¢metros para gerar visualiza√ß√µes personalizadas
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="text-sm font-medium text-indigo-900">Per√≠odo de An√°lise</label>
              <Select value={period} onValueChange={setPeriod}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1y">1 ano</SelectItem>
                  <SelectItem value="2y">2 anos</SelectItem>
                  <SelectItem value="3y">3 anos</SelectItem>
                  <SelectItem value="5y">5 anos</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium text-indigo-900">Algoritmo de Otimiza√ß√£o</label>
              <Select value={optimizationType} onValueChange={setOptimizationType}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {/* Algoritmos Principais */}
                  <SelectItem value="mean_risk">üéØ Mean-Risk (Markowitz)</SelectItem>
                  <SelectItem value="risk_budgeting">‚öñÔ∏è Risk Budgeting</SelectItem>
                  
                  {/* Algoritmos Hier√°rquicos */}
                  <SelectItem value="hrp">üå≥ Hierarchical Risk Parity (HRP)</SelectItem>
                  <SelectItem value="herc">üîó Hierarchical Equal Risk Contribution (HERC)</SelectItem>
                  <SelectItem value="nested_clusters">üé™ Nested Clusters Optimization (NCO)</SelectItem>
                  
                  {/* Modelos Baseados em Fatores */}
                  <SelectItem value="black_litterman">üß† Black-Litterman</SelectItem>
                  <SelectItem value="factor_model">üìä Factor Model</SelectItem>
                  <SelectItem value="black_litterman_factor">ü§ñ Black-Litterman + Factor Model</SelectItem>
                  
                  {/* Otimiza√ß√£o Robusta */}
                  <SelectItem value="distributionally_robust_cvar">üõ°Ô∏è Distributionally Robust CVaR</SelectItem>
                  
                  {/* M√©todos de Diversifica√ß√£o */}
                  <SelectItem value="max_diversification">üåü Maximum Diversification</SelectItem>
                  <SelectItem value="equal_weighted">‚öñÔ∏è Equal Weighted</SelectItem>
                  <SelectItem value="inverse_volatility">üìâ Inverse Volatility</SelectItem>
                  
                  {/* T√©cnicas Avan√ßadas de IA */}
                  <SelectItem value="entropy_pooling">üé≤ Entropy Pooling</SelectItem>
                  <SelectItem value="opinion_pooling">üí≠ Opinion Pooling</SelectItem>
                  <SelectItem value="stacking">üèóÔ∏è Stacking Optimization (Ensemble)</SelectItem>
                  
                  {/* Dados Sint√©ticos */}
                  <SelectItem value="synthetic_data">üî¨ Synthetic Data Generation</SelectItem>
                  
                  {/* Model Selection & Valida√ß√£o */}
                  <SelectItem value="grid_search">üîç Grid Search + Cross Validation</SelectItem>
                  <SelectItem value="randomized_search">üé∞ Randomized Search</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex items-end">
              <Button 
                onClick={generateCharts} 
                disabled={isLoading || selectedSymbols.length < 2}
                className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white shadow-lg"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Gerando...
                  </>
                ) : (
                  <>
                    <Zap className="h-4 w-4 mr-2" />
                    Gerar Visualiza√ß√µes
                  </>
                )}
              </Button>
            </div>
          </div>

          {/* S√≠mbolos Selecionados */}
          <div>
            <label className="text-sm font-medium text-indigo-900">Ativos Selecionados</label>
            <div className="flex flex-wrap gap-2 mt-2 p-3 border rounded-lg bg-white min-h-[50px]">
              {selectedSymbols.map((symbol) => (
                <Badge 
                  key={symbol} 
                  variant="secondary" 
                  className="bg-indigo-100 text-indigo-800 border-indigo-200"
                >
                  {symbol}
                </Badge>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Visualiza√ß√µes */}
      {portfolioData && (
        <Tabs defaultValue="allocation" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4 bg-gradient-to-r from-indigo-100 to-purple-100 p-1 rounded-xl">
            <TabsTrigger 
              value="allocation" 
              className="flex items-center gap-2 data-[state=active]:bg-white data-[state=active]:shadow-md rounded-lg"
            >
              <PieChart className="h-4 w-4" />
              Aloca√ß√£o
            </TabsTrigger>
            <TabsTrigger 
              value="correlation" 
              className="flex items-center gap-2 data-[state=active]:bg-white data-[state=active]:shadow-md rounded-lg"
            >
              <Layers className="h-4 w-4" />
              Correla√ß√£o
            </TabsTrigger>
            <TabsTrigger 
              value="returns" 
              className="flex items-center gap-2 data-[state=active]:bg-white data-[state=active]:shadow-md rounded-lg"
            >
              <TrendingUp className="h-4 w-4" />
              Retornos
            </TabsTrigger>
            <TabsTrigger 
              value="frontier" 
              className="flex items-center gap-2 data-[state=active]:bg-white data-[state=active]:shadow-md rounded-lg"
            >
              <BarChart3 className="h-4 w-4" />
              Fronteira
            </TabsTrigger>
          </TabsList>

          {/* M√©tricas Resumo */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <Card className="border-0 shadow-lg bg-gradient-to-br from-green-50 to-emerald-50">
              <CardContent className="p-4 text-center">
                <TrendingUp className="h-6 w-6 mx-auto mb-2 text-emerald-600" />
                <div className="text-sm font-medium text-emerald-700">Retorno</div>
                <div className="text-xl font-bold text-emerald-900">
                  {(portfolioData.portfolio_metrics.expected_return * 100).toFixed(2)}%
                </div>
              </CardContent>
            </Card>

            <Card className="border-0 shadow-lg bg-gradient-to-br from-blue-50 to-indigo-50">
              <CardContent className="p-4 text-center">
                <Activity className="h-6 w-6 mx-auto mb-2 text-blue-600" />
                <div className="text-sm font-medium text-blue-700">Volatilidade</div>
                <div className="text-xl font-bold text-blue-900">
                  {(portfolioData.portfolio_metrics.volatility * 100).toFixed(2)}%
                </div>
              </CardContent>
            </Card>

            <Card className="border-0 shadow-lg bg-gradient-to-br from-purple-50 to-violet-50">
              <CardContent className="p-4 text-center">
                <BarChart3 className="h-6 w-6 mx-auto mb-2 text-purple-600" />
                <div className="text-sm font-medium text-purple-700">Sharpe</div>
                <div className="text-xl font-bold text-purple-900">
                  {portfolioData.portfolio_metrics.sharpe_ratio.toFixed(3)}
                </div>
              </CardContent>
            </Card>

            <Card className="border-0 shadow-lg bg-gradient-to-br from-red-50 to-rose-50">
              <CardContent className="p-4 text-center">
                <TrendingUp className="h-6 w-6 mx-auto mb-2 text-red-600 rotate-180" />
                <div className="text-sm font-medium text-red-700">Max DD</div>
                <div className="text-xl font-bold text-red-900">
                  {(portfolioData.portfolio_metrics.max_drawdown * 100).toFixed(2)}%
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Tab: Aloca√ß√£o */}
          <TabsContent value="allocation" className="space-y-6">
            {portfolioData.charts.allocation_pie ? (
              <Card className="border-0 shadow-lg">
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    Aloca√ß√£o do Portf√≥lio Otimizado
                    <Button variant="outline" size="sm" onClick={() => downloadChart('allocation')}>
                      <Download className="h-4 w-4 mr-2" />
                      Download
                    </Button>
                  </CardTitle>
                  <CardDescription>
                    Distribui√ß√£o otimizada dos ativos no portf√≥lio
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <PlotlyChart
                    htmlContent={portfolioData.charts.allocation_pie}
                    chartId="allocation-pie-chart"
                    style={{ height: '500px' }}
                  />
                </CardContent>
              </Card>
            ) : (
              <Alert>
                <Eye className="h-4 w-4" />
                <AlertDescription>
                  Gr√°fico de aloca√ß√£o n√£o dispon√≠vel. Tente gerar novamente.
                </AlertDescription>
              </Alert>
            )}
          </TabsContent>

          {/* Tab: Correla√ß√£o */}
          <TabsContent value="correlation" className="space-y-6">
            {portfolioData.charts.correlation_heatmap ? (
              <Card className="border-0 shadow-lg">
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    Matriz de Correla√ß√£o dos Ativos
                    <Button variant="outline" size="sm" onClick={() => downloadChart('correlation')}>
                      <Download className="h-4 w-4 mr-2" />
                      Download
                    </Button>
                  </CardTitle>
                  <CardDescription>
                    An√°lise de correla√ß√£o entre os ativos do portf√≥lio
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <PlotlyChart
                    htmlContent={portfolioData.charts.correlation_heatmap}
                    chartId="correlation-heatmap-chart"
                    style={{ height: '500px' }}
                  />
                </CardContent>
              </Card>
            ) : (
              <Alert>
                <Eye className="h-4 w-4" />
                <AlertDescription>
                  Matriz de correla√ß√£o n√£o dispon√≠vel. Tente gerar novamente.
                </AlertDescription>
              </Alert>
            )}
          </TabsContent>

          {/* Tab: Retornos */}
          <TabsContent value="returns" className="space-y-6">
            {portfolioData.charts.returns_distribution ? (
              <Card className="border-0 shadow-lg">
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    An√°lise de Retornos do Portf√≥lio
                    <Button variant="outline" size="sm" onClick={() => downloadChart('returns')}>
                      <Download className="h-4 w-4 mr-2" />
                      Download
                    </Button>
                  </CardTitle>
                  <CardDescription>
                    Distribui√ß√£o e evolu√ß√£o dos retornos do portf√≥lio
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <PlotlyChart
                    htmlContent={portfolioData.charts.returns_distribution}
                    chartId="returns-distribution-chart"
                    style={{ height: '500px' }}
                  />
                </CardContent>
              </Card>
            ) : (
              <Alert>
                <Eye className="h-4 w-4" />
                <AlertDescription>
                  An√°lise de retornos n√£o dispon√≠vel. Tente gerar novamente.
                </AlertDescription>
              </Alert>
            )}
          </TabsContent>

          {/* Tab: Fronteira */}
          <TabsContent value="frontier" className="space-y-6">
            {portfolioData.charts.efficient_frontier ? (
              <Card className="border-0 shadow-lg">
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    An√°lise Risco vs Retorno
                    <Button variant="outline" size="sm" onClick={() => downloadChart('frontier')}>
                      <Download className="h-4 w-4 mr-2" />
                      Download
                    </Button>
                  </CardTitle>
                  <CardDescription>
                    Posicionamento do portf√≥lio otimizado no espa√ßo risco-retorno
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <PlotlyChart
                    htmlContent={portfolioData.charts.efficient_frontier}
                    chartId="efficient-frontier-chart"
                    style={{ height: '500px' }}
                  />
                </CardContent>
              </Card>
            ) : (
              <Alert>
                <Eye className="h-4 w-4" />
                <AlertDescription>
                  Gr√°fico risco-retorno n√£o dispon√≠vel. Tente gerar novamente.
                </AlertDescription>
              </Alert>
            )}
          </TabsContent>
        </Tabs>
      )}

      {/* Estado Inicial */}
      {!portfolioData && !isLoading && (
        <Card className="border-0 shadow-lg">
          <CardContent className="p-12 text-center">
            <BarChart3 className="h-16 w-16 mx-auto mb-4 text-muted-foreground" />
            <h3 className="text-lg font-medium mb-2">Visualiza√ß√µes Aguardando</h3>
            <p className="text-muted-foreground mb-4">
              Configure os par√¢metros e clique em "Gerar Visualiza√ß√µes" para criar gr√°ficos interativos.
            </p>
            <Button variant="outline" onClick={generateCharts} disabled={selectedSymbols.length < 2}>
              <Zap className="h-4 w-4 mr-2" />
              Gerar Primeira Visualiza√ß√£o
            </Button>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default AIPortfolioCharts; 